# NOTE: The descriptions are generated by Claude Code and are unaudited.
from pydantic import BaseModel, Field


class File(BaseModel):
    """Individual file within a communication."""

    id: int = Field(description="Unique file identifier")

    ffile: str = Field(description="File URL")  # empty about twice
    title: str = Field(description="File title")
    description: str = Field(description="File description")  # 99% ""
    pages: int = Field(description="Number of pages in the file")  # 40% 0
    source: str = Field(description="File source")  # 3% ""
    doc_id: str = Field(description="Document ID")  # 40% ""
    datetime: str = Field(description="Timestamp when file was created/uploaded")


class Communication(BaseModel):
    """Individual communication within a FOIA request."""

    foia: int = Field(description="FOIA request ID this communication belongs to")

    subject: str = Field(description="Communication subject")  # 2% ""
    communication: str = Field(description="Communication content")  # <1% ""
    datetime: str = Field(description="Timestamp of the communication")
    delivered: str = Field(description="Delivery method")  # "email" | "portal" | "mail" | "fax" | "web" | "none"
    autogenerated: bool = Field(description="Whether the communication was automatically generated")  # 48% true
    response: bool = Field(description="Whether this is a response communication")  # 36% true
    thanks: bool = Field(description="Whether this is a thank you communication")  # <1% true
    full_html: bool = Field(description="Whether full HTML content is available")  # true about once

    likely_foia: int | None = Field(None, description="Likely FOIA request ID")
    status: str | None = Field(None, description="Communication status")  # codelist

    # Foreign keys
    from_user: int | None = Field(None, description="User ID who sent the communication")
    to_user: int | None = Field(None, description="User ID who received the communication")

    # Relations
    files: list[File] = Field(description="Files attached to this communication")


class MuckRockFOIARequest(BaseModel):
    id: int = Field(description="Unique FOIA request identifier")

    tracking_id: str = Field(description="External tracking identifier")  # 52% ""
    title: str = Field(description="Title of the FOIA request")  # empty about once
    status: str = Field(description="Current status of the FOIA request")  # codelist
    embargo_status: str = Field(description="Current embargo status")  # "public"
    price: str = Field(description="Price/cost information")  # 95% "0.00"
    datetime_updated: str = Field(description="Last update timestamp")  # YYYY-MM-DDTHH:MM:SS
    disable_autofollowups: bool = Field(description="Whether automatic follow-ups are disabled")
    tags: list[str] = Field(description="List of tags associated with the request")  # 90% []

    datetime_submitted: str | None = Field(None, description="Submission timestamp")
    datetime_done: str | None = Field(None, description="Completion timestamp")
    date_due: str | None = Field(None, description="Due date for response")
    date_embargo: str | None = Field(None, description="Embargo end date")
    date_followup: str | None = Field(None, description="Next followup date")
    days_until_due: int | None = Field(None, description="Days remaining until due")

    # Representations
    absolute_url: str = Field(description="Absolute URL to the FOIA request on MuckRock")
    slug: str = Field(description="URL slug for the request")  # based on title

    # Foreign keys
    user: int = Field(description="User ID who submitted the request")
    agency: int = Field(description="Agency ID that received the FOIA request")

    # Denormalization
    username: str = Field(description="Username who submitted the request")

    # Relations
    communications: list[Communication] = Field(description="List of communications for this request")

    class Config:
        extra = "forbid"
        validate_assignment = True
