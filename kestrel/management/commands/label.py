import random
import re
from functools import partial

from django_rich.management import RichCommand
from rich.highlighter import RegexHighlighter
from rich.markup import escape
from rich.prompt import Prompt
from rich.rule import Rule

from kestrel.models import SOURCES, Record


class Highlighter(RegexHighlighter):
    highlights = [
        re.compile(
            # NOTE: The keywords were generated by Claude Code, and can be updated.
            r"""
            (?P<yellow>
                acquisition|
                acquisitions|
                agreement|
                agreements|
                award|
                awarded|
                awards|
                bid|
                bidder|
                bidders|
                bidding|
                bids|
                competitive bidding|
                construction agreement|
                construction contract|
                consulting agreement|
                consulting contract|
                contract|
                contracting|
                contractor|
                contractors|
                contracts|
                cost-plus|
                fixed-price|
                infrastructure|
                lease agreement|
                lease contract|
                no-bid contract|
                procure|
                procured|
                procurement|
                procuring|
                proposal|
                proposals|
                public works|
                purchase|
                purchasing|
                quotation|
                request for proposal|
                request for quote|
                rfp|
                rfq|
                sealed bid|
                service agreement|
                service contract|
                sole source|
                solicitation|
                solicitations|
                subcontract|
                subcontractor|
                subcontractors|
                supplier|
                suppliers|
                tender|
                tendering|
                tenders|
                time and materials|
                vendor|
                vendors
            )
            """,
            re.IGNORECASE | re.VERBOSE,
        )
    ]


CONSECUTIVE_EMPTY_LINES = re.compile(r"\n\s+\n")
Heading = partial(Rule, align="left", style="yellow", characters="=")
Subheading = partial(Rule, align="left", style="blue")
highlighter = Highlighter()


def highlight(text):
    return highlighter(escape(CONSECUTIVE_EMPTY_LINES.sub("\n\n", text)))


class Command(RichCommand):
    help = "Label data about procurement"

    def make_rich_console(self, **kwargs):
        return super().make_rich_console(**kwargs, highlight=False)  # disable distracting number highlights

    def add_arguments(self, parser):
        # For example, the user can provide IDs labeled by a naive classifier.
        parser.add_argument("source", choices=SOURCES, help="Source whose records to label")
        parser.add_argument("id", nargs="*", type=int, help="IDs of records expected to be about procurement")
        parser.add_argument("--relabel", action="store_true")

    def handle(self, *args, **options):
        source = options["source"]
        ids = options["id"]

        queryset = Record.objects.filter(source=source)

        if options["relabel"]:
            expected = []
            rest = ids
        else:
            unlabeled = queryset.filter(manual_label=None)
            expected = list(unlabeled.filter(pk__in=ids).values_list("pk", flat=True))
            rest = list(unlabeled.exclude(pk__in=ids).values_list("pk", flat=True))
            random.shuffle(expected)
            random.shuffle(rest)

        counts = {label: queryset.filter(manual_label=label).count() for label in (True, False)}
        # User must Ctrl-C to exit.
        while True:
            # Try to collect an equal number of each label.
            pick = expected and counts[True] <= counts[False]
            if pick:
                pk = expected.pop()
            elif rest:
                pk = rest.pop()
            else:
                break

            record = Record.objects.get(pk=pk)
            response = record.response

            match source:
                case "muckrock_foia":
                    self.console.print(
                        Heading(f"{pk=} {'[red]EXPECTED[/] ' if pick else ''}y={counts[True]} n={counts[False]}")
                    )
                    if communications := response["communications"]:
                        self.console.print(Subheading(highlight(communications[0]["subject"])), style="blue")
                        self.console.print(highlight(communications[0]["communication"]))
                    self.console.print(response["absolute_url"])
                case _:
                    raise NotImplementedError

            match Prompt.ask("Is this about procurement?", choices=["y", "n", "skip"], default="skip"):
                case "y":
                    label = True
                case "n":
                    label = False
                case _:
                    label = None

            if label is not None:
                counts[label] += 1
                record.manual_label = label
                record.save(update_fields=["manual_label"])

            self.stdout.write()
